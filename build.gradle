group 'com.gucas.cxq'
version '1.0'

apply plugin: 'idea'
apply plugin: 'scala'
apply plugin: 'java'
defaultTasks 'build'
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }
}

repositories {
    maven { url "http://nexus.d.xiaomi.net/nexus/content/groups/public" }
    mavenCentral()
}


ext {
    expectedGradleVersion = '2.8'
    targetVersion = '1.0-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

defaultTasks 'build'

group = 'cute'
version = rootProject.targetVersion

configurations {
    provided {
        dependencies.all { dep ->
            configurations.default.exclude group: dep.group, module: dep.name
        }
    }
    provided.extendsFrom compile
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'slf4j-log4j12') {
            //prefer 'log4j-over-slf4j' over 'log4j', with fixed version:
            details.useTarget "ch.qos.logback:logback-classic:1.1.3"
        }
    }
}




task copyDependencies(type: Copy) {
    from configurations.default
    into 'build/deps'
}

task createWrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}
dependencies {
    compile("org.apache.spark:spark-core_2.11:2.1.0")

    compile("com.google.code.gson:gson:2.8.0") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.apache.commons', module: 'commons-lang3'
        exclude group: 'commons-lang', module: 'commons-lang'
    }
    compile("commons-lang:commons-lang:2.6")
    compile("org.apache.commons:commons-lang3:3.5")
    compile("junit:junit:4.12")

    compile('ch.qos.logback:logback-classic:1.1.3')
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.13'

    compile('org.apache.httpcomponents:httpclient:4.5.2')
    compile('org.apache.httpcomponents:httpmime:4.5.2')
    compile group: 'io.undertow', name: 'undertow-core', version: '1.4.11.Final'
    compile 'commons-io:commons-io:2.5'
    compile 'com.networknt:client:1.3.5'

    compile 'com.xiaomi.data:data-platform-spec-profile:0.0.1-SNAPSHOT'
    compile 'com.xiaomi.data:data-platform-spec-aiservice:0.0.1-SNAPSHOT'
    compile('com.xiaomi.data:commons-spark:0.16.6.2'){
        exclude group: 'org.json4s', module: 'json4s-jackson'
        exclude group: 'org.apache.spark', module: 'spark-core'
    }

    compile 'com.hankcs:hanlp:portable-1.3.5'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.17'
    compile 'org.projectlombok:lombok:1.16.18'

//    compile group: 'org.json4s', name: 'json4s-native_2.11', version: '3.2.11'
//    compile group: 'org.json4s', name: 'json4s-jackson_2.12', version: '3.6.5'


}

idea {
    module {
        jdkName = JavaVersion.VERSION_1_8
        name = "concurrency"
        excludeDirs = [file(".gradle")]
        excludeDirs += file("$buildDir/classes")
        excludeDirs += file("$buildDir/bundles")
        excludeDirs += file("$buildDir/packages")
        excludeDirs += file("$buildDir/dependency-cache")
        excludeDirs += file("$buildDir/libs")
        excludeDirs += file("$buildDir/reports")
        excludeDirs += file("$buildDir/test-results")
        excludeDirs += file("$buildDir/tmp")
        excludeDirs += file("$buildDir/matrix")
        excludeDirs += file("$buildDir/resources")
        downloadSources = true
    }
    project {
        jdkName = JavaVersion.VERSION_1_8
        languageLevel = JavaVersion.VERSION_1_8
        vcs = 'Git'
    }
    module {
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = expectedGradleVersion
}

task "createDirs" << {
	sourceSets*.scala.srcDirs*.each { it.mkdirs() }
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
	sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

jar {
    zip64 true
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

configurations.all {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
}
